#!/usr/bin/env python
# ~/.pythonrc

import os
from pprint import pprint
import re
import subprocess
import sys
import time
from types import ModuleType


# Import colorama for color-printing to terminal
try:
    import colorama
except ImportError:
    print "Module colorama not available."
    colorama = None
finally:
    # Adds color codes to global variables
    type_to_code = {
        "Fore": ["BLUE", "CYAN", "GREEN", "MAGENTA", "RED", "LIGHTGREEN_EX", "YELLOW", "RESET"],
        "Style": ["BRIGHT", "NORMAL", "RESET_ALL"]
    }
    for typ, codes in type_to_code.iteritems():
        for code in codes:
            globals()[code] = getattr(getattr(colorama, typ), code) if colorama else ""

    globals()["BRIGHT_BLUE"] = lambda s: BRIGHT + BLUE + s + RESET_ALL


IGNORED_ATTRIBUTES = ["__builtins__", "__globals__", "func_globals"]
PYTHON_HISTORY_PATH = os.path.join(os.environ['HOME'], '.python_history')


def _brighten_it_up(func):
    """Brighten up the output"""
    def wrapper(*args, **kwargs):
        sys.stdout.write(BRIGHT)
        res = func(*args, **kwargs)
        sys.stdout.write(RESET_ALL)
        return res
    return wrapper


def wai(*things, **kwargs):
    for thing in things:
        _wai(thing, **kwargs)


@_brighten_it_up
def _wai(thing, ignore_private=False, ignore_attrs=[], call=False, skip_callable=False,
        skip_module=True, skip_known=False):
    """What Am I? Prints type and attributes of object thing.

    :param thing object: Anything and everything. That's what we're here to find out. :)
    :param ignore_private bool: Ignores attributes starting with underscore.
    :param ignore_attrs list: List of attributes to ignore.
    :param call bool: Calls attributes that are functions and thing itself if it is callable.
    :param skip_callable bool: Doesn't print callable attributes.
    :param skip_module bool: Skips module attributes.
    :param skip_known bool: If True, prints every attribute even if we know what it is.
    """
    typ = type(thing)

    if not skip_known:
        # Let's see if we know what it is first.
        if typ in (str, unicode):
            if thing:
                if os.path.exists(thing):
                    if os.path.isfile(thing):
                        if thing.endswith(".ma"):
                            print "Maya ascii file"
                        elif thing.endswith(".mb"):
                            print "Maya binary file"
                        elif thing.endswith(".exr"):
                            print "EXR image"
                        else:
                            print "file path"
                    else:
                        print "directory"
                elif re.match(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", thing):
                    print "IP Address"
                elif re.match(r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$', thing):
                    print "MAC Address"
                else:
                    print "Just a %s:" % typ.__name__, thing
            else:
                print "Empty %s: ''" % typ.__name__
            return
        elif typ in (int, float):
            if thing >= 946702800:  # Epoch date
                print "Epoch time"
                print time.strftime("%Z - %a %Y-%m-%d, %I:%M:%S %p", time.localtime(thing))
            elif typ == int:
                print "Just an int:", thing
            elif typ == float:
                print "Just a float:", thing
            return
        elif typ == dict:
            if thing:
                print BLUE + "Just a dict:"
                pprint(thing)
            else:
                print RED + "Empty dict: {}"
            return
        elif typ in (list, tuple):
            if thing:
                if len(thing) > 1:
                    typ_0 = type(thing[0])
                    is_all_same_type = True
                    for item in thing:
                        if type(item) != typ_0:
                            is_all_same_type = False
                            break
                    if not is_all_same_type:
                        print BLUE + "%s of (%s)" % (
                            typ.__name__.title(), ", ".join([type(item).__name__ for item in thing]))
                        pprint(thing)
                        return
                print BLUE + "%s of %i %s%s" % (
                    typ.__name__.title(),
                    len(thing),
                    type(thing[0]).__name__,
                    "s" if len(thing) > 1 else ""
                )
                print NORMAL + GREEN + "[0]: ",
                pprint(thing[0]), BRIGHT
                _print_types(type(thing[0]))
            else:
                print RED + "Empty %s: %s" % (typ.__name__, str(thing))
            return

    if callable(thing):
        print _func_name_args_kwargs(thing)
        if thing.__doc__:
            print thing.__doc__

    # So we don't know what it is. Let's print everything we can find about it.
    thing_name = getattr(thing, "__name__", "")
    call_count = private_count = total = 0
    ignore_attrs += IGNORED_ATTRIBUTES
    for attr in dir(thing):
        if attr in ignore_attrs:
            continue
        if attr.startswith("_"):
            private_count += 1
            if ignore_private:
                continue
        total += 1
        try:
            res = getattr(thing, attr)
        except Exception, e:
            print RED + e
            continue

        # Skip if module
        if isinstance(res, ModuleType) and skip_module:
            continue

        # Skip if callable
        is_callable = callable(res)
        long_name = "%s.%s" % (thing_name, attr)
        if is_callable and skip_callable:
            continue
        elif is_callable:
            # Print *args, **kwargs
            print _func_name_args_kwargs(res),
            call_count += 1
            if call:
                _call(res)
            else:
                print getattr(res, "__doc__")
        else:
            print BLUE + "%s:" % long_name + GREEN,
            _print(res)
    if call and callable(thing):
        _call(thing)
    sys.stdout.write(CYAN)
    if not skip_callable:
        print "Callable: %i," % call_count,
    print "Uncallable: %i" % (total - call_count)
    print "Private: %i, Public: %i" % (private_count, total - private_count)
    print "Total: %i" % total

    _print_types(typ)


def _func_name_args_kwargs(func):
    varnames_str = ""
    code = getattr(func, "__code__", None)
    if code:
        co_argcount = getattr(code, "co_argcount", None)
        co_varnames = getattr(code, "co_varnames", None)
        if co_argcount and co_varnames:
            try:
                varnames = list(co_varnames)[0:co_argcount]
            except TypeError, e:
                print "Could not get func args for", co_varnames
                return varnames_str
            defaults = getattr(func, "__defaults__", [])
            if defaults:
                for i, default in enumerate(defaults):
                    index = len(varnames) - len(defaults) + i
                    varnames[index] = MAGENTA + varnames[index] + BLUE + "=" + YELLOW + \
                        str(default) + BLUE
            varnames_str = ", ".join(varnames)
    return BLUE + "%s(%s):" % (func.__name__, varnames_str) + GREEN


def _print_types(typ):
    """Print types of all parent classes"""
    import inspect
    print typ
    print CYAN + "Parents:" + GREEN, " -> ".join([t.__name__ for t in inspect.getmro(typ)[1:]])
    print CYAN + "Type:" + GREEN, typ.__name__, RESET


def _call(func):
    try:
        res = func()
        _print(res)
    except Exception, e:
        print RED, e


def _print(to_print):
    if isinstance(to_print, basestring):
        print to_print
    else:
        pprint(to_print)


def ns(msg=""):
    """Sends a desktop notification using alias ns"""
    subprocess.call("ns %s" % msg, shell=True)


def cb(content):
    """Copies content to clipboard"""
    import clipboard, pyperclip
    try:
        clipboard.copy(content)
    except pyperclip.PyperclipException:
        clipboard.copy(str(content))


def start_QApplication():
    from PyQt4 import QtGui
    return QtGui.QApplication(sys.argv)


def _history(include_current=False):
    """Returns interactive python command history"""
    msg = []
    history_len = readline.get_current_history_length()
    end = (history_len + 1) if include_current else history_len
    for i in range(1, end):
        msg.append(readline.get_history_item(i))
    return "\n".join(msg)


def history(n=50, c=False):
    """Python version of bash history command

    Args:
        n (int): Lines to print
        c (bool): Clears history if True
    """
    if c:
        open(PYTHON_HISTORY_PATH, "w").close()
        return
    try:
        os.system("tail -%i %s" % (n, PYTHON_HISTORY_PATH))
    except IOError:
        pass
    print _history()


def _append_history_file():
    with open(PYTHON_HISTORY_PATH, "a+") as fil:
        fil.write(BRIGHT + BLUE + "\n'''New session!'''\n" + RESET_ALL)
        fil.write(_history(include_current=True) + "\n")


h = history


def _is_text(s):
    return type(s) in [str, unicode]


def find(thing, target):
    """Recursive finds path to target in dict thing

    Args:
        thing (dict or list): A complicated dict or list where I need to find a target
    """
    attrs = _find(thing, target)
    if not attrs:
        return "Target not found"
    path = ""
    for attr in attrs:
        if _is_text(attr):
            path += "['%s']" % attr
        else:
            path += "[%s]" % attr
    print "%s:" % path,
    print eval("thing%s" % path)


def _find(thing, target, path=[]):
    """Recursive helper for find()"""
    if type(thing) == dict:
        for key, val in thing.iteritems():
            if type(val) in (dict, list):
                res = _find(val, target, path=path + [key])
                if res:
                    return res
            elif val:
                if _is_text(val) and _is_text(target) and target.lower() in val.lower():
                    return path + [key]
                elif type(val) == int and target == val:
                    return path + [key]
    elif type(thing) == list:
        for index, item in enumerate(thing):
            if type(item) in (dict, list):
                res = _find(item, target, path=path + [index])
                if res:
                    return res
            elif item:
                if _is_text(item) and _is_text(target) and target.lower() in item.lower():
                    return path + [index]
                elif type(item) == int and target == item:
                    return path + [index]


def demo_colorama():
    """Print every style and color possible with colorama"""
    for color in dir(colorama.Fore):
        if color.isupper() and color != "RESET":
            print getattr(colorama.Fore, color),
            for style in dir(colorama.Style):
                if style.isupper() and style != "RESET_ALL":
                    print getattr(colorama.Style, style), style, color,
            print
    sys.stdout.write(RESET_ALL)


def time_me(func, *args, **kwargs):
    """Prints how long function call took"""
    start = time.time()
    res = func(*args, **kwargs)
    end = time.time()
    args_str = [str(arg) for arg in args]
    params = ", ".join(args_str + ["%s=%s" % (key, str(val)) for key, val in kwargs.iteritems()])
    print "%s(%s) took %2.1fms" % (func.__name__, params, (end - start) * 1000)
    return res


# Enable syntax completion
try:
    import readline
except ImportError:
    print "Module readline not available."
else:
    import atexit
    import rlcompleter
    readline.parse_and_bind("tab: complete")
    atexit.register(_append_history_file)
    del atexit, rlcompleter
