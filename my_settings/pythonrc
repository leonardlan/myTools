#!/usr/bin/env python
# ~/.pythonrc

'''Useful functions, variables, and setup configs to use in Python CLI.'''

import os
import re
import sys
import time

# Enable syntax completion.
import atexit
import rlcompleter

start = time.time()

from pprint import pprint

from tabulate import tabulate

# My Tools.

from cli_tools import (cb, cb_strings, confirm, diff, find, get, print_env_vars,
    print_python_path, print_sys_path, Timer)
from colors import *
from file_tools import read_file, write_file
from json_tools import dump_json, load_json
from lancore import *
from my_settings import HOME, MAX_LINES
from notify_tools import ns
from os_tools import tree
from path_tools import open_path, print_path
from python_compatibility import reload
from smart_list import SmartList
from subprocess_tools import meld, subl
from wai import wai, call_gets

# For playing around in CLI.
from mock_data import DOGS, DOGS_DICT, PEOPLE, PEOPLE_DICT, TYPE_TO_VAL


PYTHON_HISTORY_PATH = os.path.join(HOME, '.python_history')


IS_LINUX = sys.platform.startswith('linux')


def start_qt_application():
    from PyQt4 import QtGui
    return QtGui.QApplication(sys.argv)


# Only Linux specific.
if IS_LINUX:
    less_history = lambda: os.system('less -r +G %s' % PYTHON_HISTORY_PATH)


    def hs(str_, max_count=5):
        '''Regex search interactive python history using grep. Returns last max_count results.

        Args:
            str_ (str): String to search for.
            max_count (int): Max number of lines to show.
        '''
        os.system('grep "%s" %s | tail -%i | grep --color=auto "%s"' % (
            str_, PYTHON_HISTORY_PATH, max_count, str_))


def reload_pythonrc():
    '''Reload this file to update current CLI session without exiting. Reloadception!'''
    execfile(os.environ.get('PYTHONSTARTUP'))


def print_tabulate(
        input_, keys=None, sorted_key=None, reverse=False, limit=MAX_LINES, headers='keys'):
    '''Wrapper around tabulate() to print table from dicts or dict of dicts with keys as headers.

    Args:
        input_ ([dict] or dict): Dict(s) to print.
        keys (list): Print only these keys as columns in this order. Print all keys if None.
            Supports char-delimited string for nested dicts.
        sorted_key (list of keys or whatever keys are): Key to sort rows by.
        reverse (bool): Reverse row sort order if True. Passed to sorted().
        limit (int): Limit number of results. Show all if negative.
        headers (str): Passed to tabulate(). Show keys as headers by difficult.
    '''
    if isinstance(input_, dict) and all(isinstance(val, dict) for val in input_.values()):
        # Convert dict of dicts to list of dicts with new 'key' value as key of original dict.
        # {
        #     'fruits': {'apple': 'red', 'banana': 'yellow'},
        #     'vegetables': {'kale': 'green'}
        # } =>
        # [
        #     {'key': 'fruits', 'apple': 'red', 'banana': 'yellow'},
        #     {'key': 'vegetables', 'kale': 'green'}
        # ]
        from collections import OrderedDict
        new_dicts = []
        for key, val in input_.iteritems():
            new_dict = OrderedDict()
            new_dict['key'] = key
            if isinstance(val, dict):
                for key_1, val_1 in val.iteritems():
                    new_dict[key_1] = val_1
            new_dicts.append(new_dict)
        dicts = new_dicts
    else:
        dicts = input_

    # Sort by specified key(s.
    if sorted_key:
        if isinstance(sorted_key, list):
            # List of keys to sort by.
            sorted_key_func = lambda x: tuple(get(x, key) for key in sorted_key)
        else:
            sorted_key_func = lambda x: x.get(sorted_key)
        dicts = sorted(dicts, key=sorted_key_func, reverse=reverse)

    # Filter to only specified keys in order.
    if keys:
        from collections import OrderedDict
        new_dicts = []
        for dict_ in dicts:
            new_dict = OrderedDict()
            for key in keys:
                new_dict[key] = get(dict_, key)
            new_dicts.append(new_dict)
    else:
        new_dicts = dicts

    # Limit rows to show.
    is_limited = False
    len_before_limit = -1
    if len(new_dicts) > limit >= 0:
        is_limited = True
        len_before_limit = len(new_dicts)
        new_dicts = new_dicts[:limit]

    # Print table.
    print(tabulate(new_dicts, headers))

    # Print results are limited.
    if is_limited:
        print('...')
        print('Only showing %i/%i results' % (limit, len_before_limit))


# Add tab complete and append history file on exit.
try:
    import readline
except ImportError:
    warning('Module readline not available. No tab complete available.')
else:
    # Enable tab complete.
    readline.parse_and_bind('tab: complete')


    def _history(include_current=False):
        '''Returns current interactive python session command history.'''
        msg = []
        history_len = readline.get_current_history_length()
        end = (history_len + 1) if include_current else history_len
        for i in range(1, end):
            msg.append(readline.get_history_item(i))
        return '\n'.join(msg)


    def history(n=50, c=False):
        '''Python version of bash history command

        Args:
            n (int): Lines to print
            c (bool): Clears history if True
        '''
        if c:
            open(PYTHON_HISTORY_PATH, 'w').close()
            print('History cleared ;)')
            return

        if not os.path.exists(PYTHON_HISTORY_PATH):
            return

        # Tail history if on linux.
        if IS_LINUX:
            try:
                os.system('tail -%i %s' % (n, PYTHON_HISTORY_PATH))
            except IOError:
                pass

        print(bright_blue('\nCurrent session [%s]:' % my_timestamp()))
        print(_history())


    def _append_history_file():
        '''Write command history to PYTHON_HISTORY_PATH.'''
        history = _history(include_current=True)
        if not history:
            return
        with open(PYTHON_HISTORY_PATH, 'a+') as fil:
            fil.write(
                bright_blue("\n'''New session [%s]'''\n" % my_timestamp()))
            fil.write(history + '\n')


    # Register _append_history_file() on CLI exit.
    atexit.register(_append_history_file)


    # Make h print history without having to call function. h() works too.
    class History:
        def __call__(self):
            history()

        def __repr__(self):
            history()
            return ''

    h = History()


# My custom Python prompt.
class MyPrompt:
    def __repr__(self):
        now = datetime.datetime.now()
        return '{} >>> '.format(str(now.strftime('%I:%M:%S %p')))

sys.ps1 = MyPrompt()


# Shortcuts cause I'm lazy and forgetful.
ls = print_path


# Remove unneeded modules.
del atexit, rlcompleter


print('Loading .pythonrc took %s' % human_time(time.time() - start))
